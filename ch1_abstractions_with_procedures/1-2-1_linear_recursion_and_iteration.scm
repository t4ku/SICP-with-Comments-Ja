
;基本的な演算や手続きを定義する方法を覚えたが、言ってみれば
;チェスで駒がどう動けるかを知っただけで、典型的な開始法や戦術や
;戦略については全く知らない状態だ。手続きの結果を予想できる経験を持ち合わせていない。
;
;検討している動作の結果を視覚化する能力は熟練のプログラマーになるためには欠かせない。
;
;手続きとは計算処理の局所的な進化のパターンである。どのようにある段階の処理がその前の
;段階の上に積み重ねられるかを指定することである。手続きによって局所的に進化した処理の
;全体的な振る舞いを記述したいとする。これは一般的にとても難しいだが、処理が進化する時の
;典型的なパターンを記述してみたい。
;
;このセクションでは、簡単な手続きによって生成される処理に共通する"形状"をいくつか見てみる。
;

; 1.2.1 線形再帰と繰り返し

; まず、下記の式で定義される階乗を取り上げる
; n! = n (n-1) (n-2) 3*2*1
;
; 階乗を計算するには多くの方法があるが、一つは
; いかなる自然数nでもnの階乗はn*(n-1)!であるという実実を
; 利用する方法だ。
;
;
(define (factorial n)
  (if (= n 1)
    1
    (* n(factorial(- n 1)))))
(print (factorial 3))

;1-1-5の置き換えモデルを使用して6!を計算する過程を見る事ができる。
;
;(factorial 6)
;(* 6 (factorial 5))
;(* 6 (* 5 (factorial 4)))
;(* 6 (* 5 (* 4 (factorial 3))))
;(* 6 (* 5 (* 4 (* 3 (factorial 2)))))
;(* 6 (* 5 (* 4 (* 3 (* 2 (factorial 1))))))
;(* 6 (* 5 (* 4 (* 3 (* 2 1)))))
;(* 6 (* 5 (* 4 (* 3 2))))
;(* 6 (* 5 (* 4 6)))
;(* 6 (* 5 24))
;(* 6 120)
;720


;次に、違う観点から階乗を見てみる。
;n!は1*2の結果を3と、さらにその結果を4と次々に掛けていった最終結果と
;考える事ができる。

;もう少し形式的にいえば、1からnまで数え上げるカウンターと結果を維持している場合に
;階乗の計算は下記の法則に従って結果とカウンターが1からnまで変化していった結果といえる。

;結果 <- カウンター * 結果
;カウンター <- カウンター + 1

;この過程は下記の手続きで定義できる

(define (factorial n)
  (fact-iter 1 1 n))
(define (fact-iter product count max-count)
  (if(> count max-count)
    product
    (fact-iter 
      (* product count) 
      (+ 1 count) 
      max-count)))
(print (factorial 6))

;この演算の過程は置き換えモデルを使用して下記のように
;表現できる

;(factorial 6)
;(factorial   1 1 6)
;(factorial   1 2 6)
;(factorial   2 3 6)
;(factorial   6 4 6)
;(factorial  24 5 6)
;(factorial 120 6 6)
;(factorial 720 7 6)

;二つの処理の過程を比べてみると、ある観点からみるとほとんど違いがないように見える。
;どちらも同じ問題にたいして同じ算術演算をしているし、n!を計算するために必要なステップは
;同じ割合で増えている。

;最初の処理では、置き換えモデルで見てみると式を展開しその後に集約している。
;式の展開と同時に遅延処理のつながりを形成し、集約とともに演算が行われる。
;こうした、遅延処理に特徴づけられるタイプの処理を再帰的処理という。
;このような処理を行うためには実装系は後で実行される処理を気負うしておく必要がある。
;n!の演算では、遅延処理のつながり、そしてそれを記憶しておく量はnに比して線形に拡大する。

;対象的に二番目の処理は拡大したり収縮したりしない。どのステップでも、nが五のような自然数
;であっても、記憶しておかなければならない値は,現在のproduct,count,max-countの値だけである。
;このような処理を反復的処理と呼ぶ。一般的に反復的処理では処理の状態は一定の数の状態変数
;とそれを次のステップの状態変数にどのように反映するかという固定のルール、および終了条件
;によって要約される。

;この二つの処理の比較は別の視点からも捉えられる。反復的処理の場合、プログラムの変数によって
;処理の状態が完全に記述できる。途中で処理をとめたとしても、処理を再開するためには三つの
;変数を実装系に与えればよいだけだ。再帰的処理ではそうはいかない。
;この場合、実装系によって保持されプログラムの変数には現れない"処理がどの段階であるか"を
;指し示す隠れた情報があり、遅延処理時に使用される。

;反復と再帰を比較する場合に再帰的処理と再帰的手続きを混同してはいけない。
;手続きが再帰的であるという場合には、手続きの定義の中でそれ自身を参照するというは対称性
;をいうが、処理が再帰的であるとは処理がどのように展開するかを問題にしている。

;処理と手続きの違いを混同しやす一つの原因は、(AdaやPascalやCなどの)たいていの汎用言語の実装
;では記述された処理自体が反復的処理であっても、再帰的手続きを評価する際に手続きの呼び出し
;に比して必要な記憶容量が増加するからである。結果としてこうした言語では、do/repeat/until/for/while
;などの目的に特化した構成要素を使用することでしか反復的処理を記述できない。
;5章で検討するように、Schemeの実装にはこの欠点は存在しない。そこでは反復的処理は再帰的手続き
;で記述されても一定の記憶容量しか使用しない。こうした実装の特性を末尾再帰(tail-recursive)と呼ぶ。


